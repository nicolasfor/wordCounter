// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class App extends _react.Component {

  constructor(state)
  {
    super(state);
    this.state = { files: [], dictionaries: [] };
  }
  onDrop(files) {
    let newFiles = this.state.files.concat(files);
    this.setState({ files: newFiles });
    this.createDictionary(files);
  }
  async createDictionary(files)
  {var
    dictionaries = this.state.dictionaries;
    let promises = [];
    if (Array.isArray(files) && files.length > 0)
    files.forEach((item, index) => {
      console.log("item", item);
      promises.push(this.readerPromise(item));
    });

    try {
      let results = await Promise.all(promises);

      results.forEach((plainText, index) => {
        if (plainText)
        {
          let dictionary = {};
          plainText.toLowerCase().split(' ').
          forEach((word, index) => {
            word = word.replace(/[^\\w\\s]/gi, '').replace(/\\r?\\n|\\r/, '').replace(/\\s/g, '');
            if (word && word.length > 0)
            {
              let validWord = _blackList2.default.find((item, index) => item == word);
              if (!validWord)
              {
                let firstLetter = word[0];
                if (!dictionary[firstLetter])
                dictionary[firstLetter] = {};
                if (!dictionary[firstLetter][word])
                dictionary[firstLetter][word] = 1;else

                dictionary[firstLetter][word] += 1;
              }
            }
          });
          dictionaries.push({ dictionary, plainText, name: files[index].name });
        }
      });
      this.setState({ dictionaries });
    }
    catch (error) {
      console.log("error", error);
      alert("Error: " + error);
    }
  }

  readerPromise(file)
  {
    return new Promise((resolve, reject) => {
      var reader = new FileReader();
      reader.onload = () => {
        console.log("reader.result", reader.result);
        if (file.type.match('text/plain'))
        resolve(reader.result);else

        reject(file.name + " is not a valid format");
      };
      reader.onerror = () => {
        reject("Opps something happened!");
      };
      reader.readAsText(file);
    });
  }

  render() {let
    dictionaries = this.state.dictionaries;
    return (
      _react2.default.createElement('div', { className: 'App', __source: { fileName: _jsxFileName, lineNumber: 87 }, __self: this },
        _react2.default.createElement('header', { className: 'App-header', __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this },
          _react2.default.createElement('img', { src: _logo2.default, className: 'App-logo', alt: 'logo', __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this }),
          _react2.default.createElement('h1', { className: 'App-title', __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this }, 'Verification and Validation')),

        _react2.default.createElement('div', { className: 'App-intro', __source: { fileName: _jsxFileName, lineNumber: 92 }, __self: this },
          dictionaries.map((dictionary, index) => _react2.default.createElement(_Dictionary2.default, { key: index, dictionary: dictionary, __source: { fileName: _jsxFileName, lineNumber: 93 }, __self: this })),
          _react2.default.createElement('div', { className: 'card-footer text-muted', __source: { fileName: _jsxFileName, lineNumber: 94 }, __self: this },
            _react2.default.createElement(_reactDropzone2.default, { className: 'dropfiles', onDrop: this.onDrop.bind(this), __source: { fileName: _jsxFileName, lineNumber: 95 }, __self: this },
              _react2.default.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this }, 'Try dropping some files here, or click to select files to upload.'))))));





  }} renders and matches our snapshot 1`] = `
<div
  className="App"
>
  <header
    className="App-header"
  >
    <img
      alt="logo"
      className="App-logo"
      src="logo.svg"
    />
    <h1
      className="App-title"
    >
      Verification and Validation
    </h1>
  </header>
  <div
    className="App-intro"
  >
    <div
      className="card-footer text-muted"
    >
      <div
        aria-disabled={false}
        className="dropfiles"
        onClick={[Function]}
        onDragEnter={[Function]}
        onDragLeave={[Function]}
        onDragOver={[Function]}
        onDragStart={[Function]}
        onDrop={[Function]}
        style={
          Object {
            "position": "relative",
          }
        }
      >
        <p>
          Try dropping some files here, or click to select files to upload.
        </p>
        <input
          accept={undefined}
          autoComplete="off"
          disabled={false}
          multiple={true}
          onChange={[Function]}
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "opacity": 0.00001,
              "pointerEvents": "none",
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
          type="file"
        />
      </div>
    </div>
  </div>
</div>
`;
